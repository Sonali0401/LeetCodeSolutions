Solution 1 :
class Solution {
    public int findJudge(int n, int[][] trust) {
        HashMap<Integer, Integer> hmap = new HashMap<>();
        HashSet<Integer> hset = new HashSet<>();
        for(int i = 1; i <= n; i++) {
            hmap.put(i, 0);
        }
        for(int i = 0; i < trust.length; i++) {
            hset.add(trust[i][0]);
            if(hmap.containsKey(trust[i][1]))
                hmap.put(trust[i][1], hmap.get(trust[i][1]) + 1);
        }
        int result = 0;
        int count = 0;
        for(Map.Entry<Integer, Integer> set : hmap.entrySet()) {
            if(set.getValue() == n - 1) {
                result = set.getKey();
                count++;
            }
        }
        if(count == 1 && !hset.contains(result))
            return result;
        else
            return -1;
    }
}

Solution 2 :
class Solution {
    public int findJudge(int n, int[][] trust) {
        int arr[] = new int[n + 1];
        for(int i = 0; i < trust.length; i++){
            arr[trust[i][0]]--;
            arr[trust[i][1]]++;
         }
        for(int i = 1; i < arr.length; i++){
            if(arr[i] == n - 1) return i;
        }
        return -1;
    }
}
